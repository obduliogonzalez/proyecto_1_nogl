"edad_quinquenales", "Depto_nacimiento_inf", "Nacionalidad_inf",
"Subg_principales", "Gran_grupos", "Muni_in_ra
# Instalar y cargar tidyr si no está instalado
if(!require(tidyr)) install.packages("tidyr", dependencies=TRUE)
library(tidyr)
# Convertir transactions a un data.frame que contenga cada transacción como texto
datos_df <- as(datos, "data.frame")
# Usar tidyr para separar los items en columnas individuales
library(tidyr)
datos_df <- datos_df %>%
separate(items,
into = c("Depto_boleta", "Muni_boleta", "Mes_boleta", "Año_boleta",
"Falta_inf", "Sexo_inf", "Edad_inf", "Grupo_étnico_inf",
"Est_conyugal_inf", "Nacimiento_inf", "Cond_alfabetismo_inf",
"Niv_escolaridad_inf", "G_primarios", "Área_geo_inf",
"Est_ebriedad_inf", "g_edad_80ymás", "g_edad_60ymás",
"edad_quinquenales", "Depto_nacimiento_inf", "Nacionalidad_inf",
"Subg_principales", "Gran_grupos", "Muni_in_range", "Grupo_in_range"),
sep = ",", extra = "drop", fill = "right")
# Limpiar los nombres para eliminar cualquier símbolo adicional
library(dplyr)
datos_df <- datos_df %>%
mutate(across(everything(), ~ gsub("[{}]", "", .))) %>%
mutate(across(everything(), ~ gsub("=.*", "", .)))
# Cargar la librería ggplot2
library(ggplot2)
# Graficar la distribución de faltas por tipo, departamento y sexo
ggplot(data = datos_df, aes(x = Falta_inf, fill = Sexo_inf)) +
geom_bar(position = "dodge") +
facet_wrap(~ Depto_boleta) +
labs(
title = "Distribución de Tipos de Faltas por Departamento y Sexo",
x = "Tipo de Falta",
y = "Cantidad de Casos",
fill = "Sexo (1: Hombre, 2: Mujer)"
) +
scale_fill_manual(values = c("1" = "#1f77b4", "2" = "#ff7f0e"), labels = c("Hombre", "Mujer")) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Cargar la librería ggplot2
library(ggplot2)
# Graficar la distribución de faltas por tipo, departamento y sexo (sin escala manual de colores)
ggplot(data = datos_df, aes(x = Falta_inf, fill = Sexo_inf)) +
geom_bar(position = "dodge") +
facet_wrap(~ Depto_boleta) +
labs(
title = "Distribución de Tipos de Faltas por Departamento y Sexo",
x = "Tipo de Falta",
y = "Cantidad de Casos",
fill = "Sexo"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Gráfico con facetas por Año y Departamento
ggplot(data = datos_df, aes(x = Falta_inf, fill = Sexo_inf)) +
geom_bar(position = "dodge") +
facet_grid(Depto_boleta ~ Año_boleta) +
labs(
title = "Distribución de Tipos de Faltas por Departamento, Año y Sexo",
x = "Tipo de Falta",
y = "Cantidad de Casos",
fill = "Sexo"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Gráfico con facetas por Mes y Departamento
ggplot(data = datos_df, aes(x = Falta_inf, fill = Sexo_inf)) +
geom_bar(position = "dodge") +
facet_grid(Depto_boleta ~ Mes_boleta) +
labs(
title = "Distribución de Tipos de Faltas por Departamento, Mes y Sexo",
x = "Tipo de Falta",
y = "Cantidad de Casos",
fill = "Sexo"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Filtrar los datos para los meses de interés y subgrupo específico
datos_patron <- datos_df %>%
filter(Mes_boleta >= 1 & Mes_boleta < 4, Subg_principales >= 11 & Subg_principales <= 61)
# Crear una columna para indicar si cumple con Gran_grupos=[1,6)
datos_patron <- datos_patron %>%
mutate(Cumple_Gran_grupos = ifelse(Gran_grupos >= 1 & Gran_grupos <= 6, "Sí", "No"))
# Graficar la frecuencia de cumplimiento del patrón
library(ggplot2)
ggplot(data = datos_patron, aes(x = Mes_boleta, fill = Cumple_Gran_grupos)) +
geom_bar(position = "dodge") +
labs(
title = "Cumplimiento de Gran_grupos=[1,6) para Subg_principales=[11,61) en Meses 1 a 4",
x = "Mes",
y = "Cantidad de Casos",
fill = "Cumple Gran_grupos=[1,6)"
) +
scale_fill_manual(values = c("Sí" = "#1f77b4", "No" = "#ff7f0e")) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Verificar los valores únicos en Mes_boleta y Subg_principales
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
# Aplicar el filtro y ver el número de filas resultantes
datos_patron <- datos_df %>%
filter(Mes_boleta >= 1 & Mes_boleta < 4, Subg_principales >= 11 & Subg_principales <= 61)
# Verificar el número de filas resultantes
nrow(datos_patron)
head(datos_patron)
# Verificar los nombres de las columnas
colnames(datos_df)
# Verificar los valores únicos de Mes_boleta y Subg_principales
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
# Verificar los valores únicos de Mes_boleta y Subg_principales
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
# Aplicar el filtro con los valores verificados
datos_patron <- datos_df %>%
filter(Mes_boleta >= 1 & Mes_boleta < 4, Subg_principales >= 11 & Subg_principales <= 61)
# Verificar cuántas filas cumplen con el filtro
nrow(datos_patron)
head(datos_patron)
# Filtrar los datos para los meses de interés y subgrupo específico
datos_patron <- datos_df %>%
filter(Mes_boleta >= 1 & Mes_boleta < 4, Subg_principales >= 11 & Subg_principales <= 61)
# Crear una columna para indicar si cumple con Gran_grupos=[1,6)
datos_patron <- datos_patron %>%
mutate(Cumple_Gran_grupos = ifelse(Gran_grupos >= 1 & Gran_grupos <= 6, "Sí", "No"))
# Graficar la frecuencia de cumplimiento del patrón
library(ggplot2)
ggplot(data = datos_patron, aes(x = Mes_boleta, fill = Cumple_Gran_grupos)) +
geom_bar(position = "dodge") +
labs(
title = "Cumplimiento de Gran_grupos=[1,6) para Subg_principales=[11,61) en Meses 1 a 4",
x = "Mes",
y = "Cantidad de Casos",
fill = "Cumple Gran_grupos=[1,6)"
) +
scale_fill_manual(values = c("Sí" = "#1f77b4", "No" = "#ff7f0e")) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Verificar los valores únicos de Mes_boleta y Subg_principales
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
datos_patron <- datos_df %>%
filter(Mes_boleta == "[1,4)", Subg_principales == "[11,61)")
# Ver las primeras filas de datos_df para verificar la estructura
head(datos_df)
# Verificar los valores únicos en Mes_boleta y Subg_principales
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
# Ajustar el filtro para valores específicos de texto si es necesario
datos_patron <- datos_df %>%
filter(Mes_boleta == "[1,4)", Subg_principales == "[11,61)")
# Ver las primeras filas de datos_df para verificar la estructura
head(datos_df)
# Verificar los valores únicos en Mes_boleta y Subg_principales
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
# Ajustar el filtro para valores específicos de texto si es necesario
datos_patron <- datos_df %>%
filter(Mes_boleta == "[1,4)", Subg_principales == "[11,61)")
# Cargar dplyr para manipulación de datos
library(dplyr)
# Limpiar los caracteres adicionales en Mes_boleta, Subg_principales, y Año_boleta
datos_df <- datos_df %>%
mutate(
Mes_boleta = as.numeric(gsub("[^0-9]", "", Mes_boleta)),
Subg_principales = as.numeric(gsub("[^0-9]", "", Subg_principales)),
Año_boleta = as.numeric(gsub("[^0-9]", "", Año_boleta))
)
# Cargar dplyr para manipulación de datos
library(dplyr)
# Limpiar los caracteres adicionales en Mes_boleta, Subg_principales, y Año_boleta
datos_df <- datos_df %>%
mutate(
Mes_boleta = as.numeric(gsub("[^0-9]", "", Mes_boleta)),
Subg_principales = as.numeric(gsub("[^0-9]", "", Subg_principales)),
Año_boleta = as.numeric(gsub("[^0-9]", "", Año_boleta))
)
# Cargar dplyr para manipulación de datos
library(dplyr)
# Limpiar los caracteres adicionales en Mes_boleta, Subg_principales, y Año_boleta
datos_df <- datos_df %>%
mutate(
Mes_boleta = as.numeric(gsub("[^0-9]", "", Mes_boleta)),
Subg_principales = as.numeric(gsub("[^0-9]", "", Subg_principales)),
Año_boleta = as.numeric(gsub("[^0-9]", "", Año_boleta))
)
# Filtrar los datos con los valores de interés
datos_patron <- datos_df %>%
filter(Mes_boleta >= 1 & Mes_boleta < 4, Subg_principales >= 11 & Subg_principales <= 61)
# Verificar el número de filas resultantes
nrow(datos_patron)
head(datos_patron)
# Verificar los valores únicos de Mes_boleta y Subg_principales después de la limpieza
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
datos_mes <- datos_df %>%
filter(Mes_boleta >= 1 & Mes_boleta < 4)
# Verificar el número de filas resultantes
nrow(datos_mes)
head(datos_mes)
datos_subgrupo <- datos_df %>%
filter(Subg_principales >= 11 & Subg_principales <= 61)
# Verificar el número de filas resultantes
nrow(datos_subgrupo)
head(datos_subgrupo)
# Instalar y cargar tidyr si no está instalado
if(!require(tidyr)) install.packages("tidyr", dependencies=TRUE)
library(tidyr)
# Convertir transactions a un data.frame que contenga cada transacción como texto
datos_df <- as(datos, "data.frame")
# Usar tidyr para separar los items en columnas individuales
library(tidyr)
datos_df <- datos_df %>%
separate(items,
into = c("Depto_boleta", "Muni_boleta", "Mes_boleta", "Año_boleta",
"Falta_inf", "Sexo_inf", "Edad_inf", "Grupo_étnico_inf",
"Est_conyugal_inf", "Nacimiento_inf", "Cond_alfabetismo_inf",
"Niv_escolaridad_inf", "G_primarios", "Área_geo_inf",
"Est_ebriedad_inf", "g_edad_80ymás", "g_edad_60ymás",
"edad_quinquenales", "Depto_nacimiento_inf", "Nacionalidad_inf",
"Subg_principales", "Gran_grupos", "Muni_in_range", "Grupo_in_range"),
sep = ",", extra = "drop", fill = "right")
# Limpiar los nombres para eliminar cualquier símbolo adicional
library(dplyr)
datos_df <- datos_df %>%
mutate(across(everything(), ~ gsub("[{}]", "", .))) %>%
mutate(across(everything(), ~ gsub("=.*", "", .)))
colnames(datos_df)
# Obtener estadísticas resumidas para Mes_boleta y Subg_principales
summary(datos_df$Mes_boleta)
summary(datos_df$Subg_principales)
# Ver los valores únicos para ver posibles patrones
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
# Obtener estadísticas resumidas para Mes_boleta y Subg_principales
summary(datos_df$Mes_boleta)
summary(datos_df$Subg_principales)
# Ver los valores únicos para ver posibles patrones
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
library(ggplot2)
# Gráfico de la distribución de Mes_boleta
ggplot(datos_df, aes(x = as.factor(Mes_boleta))) +
geom_bar(fill = "#1f77b4") +
labs(
title = "Distribución de Casos por Mes",
x = "Mes",
y = "Cantidad de Casos"
) +
theme_minimal()
# Gráfico de la distribución de Subg_principales
ggplot(datos_df, aes(x = as.factor(Subg_principales))) +
geom_bar(fill = "#ff7f0e") +
labs(
title = "Distribución de Casos por Subgrupo Principal",
x = "Subg_principales",
y = "Cantidad de Casos"
) +
theme_minimal()
# Obtener estadísticas resumidas para Mes_boleta y Subg_principales
summary(datos_df$Mes_boleta)
summary(datos_df$Subg_principales)
# Ver los valores únicos para ver posibles patrones
unique(datos_df$Mes_boleta)
unique(datos_df$Subg_principales)
library(ggplot2)
# Gráfico de la distribución de Mes_boleta desglosado por Sexo
ggplot(datos_df, aes(x = as.factor(Mes_boleta), fill = as.factor(Sexo_inf))) +
geom_bar(position = "dodge") +
labs(
title = "Distribución de Casos por Mes y Sexo",
x = "Mes",
y = "Cantidad de Casos",
fill = "Sexo"
) +
scale_fill_manual(values = c("1" = "#1f77b4", "2" = "#ff7f0e"), labels = c("Hombre", "Mujer")) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Gráfico de la distribución de Subg_principales desglosado por Sexo
ggplot(datos_df, aes(x = as.factor(Subg_principales), fill = as.factor(Sexo_inf))) +
geom_bar(position = "dodge") +
labs(
title = "Distribución de Casos por Subgrupo Principal y Sexo",
x = "Subgrupo Principal",
y = "Cantidad de Casos",
fill = "Sexo"
) +
scale_fill_manual(values = c("1" = "#1f77b4", "2" = "#ff7f0e"), labels = c("Hombre", "Mujer")) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
# Verificar los valores únicos de Sexo_inf
unique(datos_df$Sexo_inf)
# Convertir Sexo_inf a factor si los valores son correctos
datos_df$Sexo_inf <- as.factor(datos_df$Sexo_inf)
# Limpiar Sexo_inf si contiene caracteres adicionales
datos_df$Sexo_inf <- gsub("[^0-9]", "", datos_df$Sexo_inf) # Esto elimina caracteres no numéricos
datos_df$Sexo_inf <- as.factor(datos_df$Sexo_inf) # Convertir a factor
# Gráfico de la distribución de Mes_boleta desglosado por Sexo (intenta nuevamente)
ggplot(datos_df, aes(x = as.factor(Mes_boleta), fill = Sexo_inf)) +
geom_bar(position = "dodge") +
labs(
title = "Distribución de Casos por Mes y Sexo",
x = "Mes",
y = "Cantidad de Casos",
fill = "Sexo"
) +
scale_fill_manual(values = c("1" = "#1f77b4", "2" = "#ff7f0e"), labels = c("Hombre", "Mujer")) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
)
scale_fill_manual(values = c("Hombre" = "#1f77b4", "Mujer" = "#ff7f0e"))
# Instalar y cargar arulesCBA
if (!require(arulesCBA)) install.packages("arulesCBA")
library(arulesCBA)
# Supongamos que tus datos están en un data.frame llamado datos_df
# Convertir a formato de transacciones
datos_trans <- as(datos_df, "transactions")
# Convertir todas las columnas de datos_df a factores
datos_df[] <- lapply(datos_df, as.factor)
library(arules)
# Convertir a transacciones
datos_trans <- as(datos_df, "transactions")
library(arulesCBA)
# Aplicar FP-Growth
frequent_itemsets <- fpgrowth(datos_trans, parameter = list(supp = 0.01))
# Instalar y cargar la librería arules si aún no está instalada
if (!require(arules)) install.packages("arules")
library(arules)
# Convertir el data.frame a transacciones, asegurando que todas las columnas son factores
datos_df[] <- lapply(datos_df, as.factor)
datos_trans <- as(datos_df, "transactions")
# Aplicar el algoritmo Apriori para obtener conjuntos de elementos frecuentes
frequent_itemsets <- apriori(datos_trans, parameter = list(supp = 0.01, target = "frequent itemsets"))
# Ver los primeros resultados
inspect(frequent_itemsets[1:10])
# Filtrar los conjuntos de elementos que contienen los atributos de interés
patron_interes <- subset(frequent_itemsets, items %in% "Mes_boleta=[1,4)" & items %in% "Subg_principales=[11,61)")
# Instala y carga la librería arulesViz para visualización
install.packages("arulesViz")
library(arulesViz)
# Visualizar las reglas en un gráfico
plot(reglas_interesantes, method = "graph", control = list(type = "items"))
# Selecciona las columnas que vas a analizar para reglas de asociación
# Por ejemplo, supongamos que vamos a usar: Sexo_inf, Depto_boleta, Falta_inf, Edad_inf
datos_subset2 <- datos[, c("Sexo_inf", "Depto_boleta", "Falta_inf", "Edad_inf")]
datos <- dataset
# Selecciona las columnas que vas a analizar para reglas de asociación
# Por ejemplo, supongamos que estamos usando las variables: Sexo_inf, Depto_boleta, Falta_inf, Edad_inf
datos_subset <- datos[, c("Sexo_inf", "Depto_boleta", "Falta_inf", "Edad_inf")]
# Convierte las variables seleccionadas en factores (categorías) si es necesario
datos_subset$Sexo_inf <- as.factor(datos_subset$Sexo_inf)
datos_subset$Depto_boleta <- as.factor(datos_subset$Depto_boleta)
datos_subset$Falta_inf <- as.factor(datos_subset$Falta_inf)
datos_subset$Edad_inf <- as.factor(datos_subset$Edad_inf)
# Convertir los datos en formato de transacciones
transacciones <- as(datos_subset, "transactions")
# Resumen de las transacciones
summary(transacciones)
# Aplicar el algoritmo FP-Growth
# Ajusta los parámetros de soporte mínimo (minSupport) y confianza mínima (minConfidence) según los requisitos
reglas <- apriori(
transacciones,
parameter = list(supp = 0.01, conf = 0.5, target = "rules")
)
# Visualizar un resumen de las reglas encontradas
summary(reglas)
# Visualizar las 10 reglas más significativas ordenadas por confianza
inspect(head(sort(reglas, by = "confidence"), 10))
# Filtra las reglas que tengan un soporte mínimo de 0.02 y un lift mayor a 1.2
reglas_interesantes <- subset(
reglas,
subset = support > 0.02 & lift > 1.2
)
# Ver las reglas filtradas
inspect(reglas_interesantes)
# Visualizar 4 reglas seleccionadas
inspect(head(sort(reglas_interesantes, by = "lift"), 4))
# Instala y carga la librería arulesViz para visualización
install.packages("arulesViz")
library(arulesViz)
# Visualizar las reglas en un gráfico
plot(reglas_interesantes, method = "graph", control = list(type = "items"))
install.packages("arulesViz")
# Instala y carga la librería arulesViz para visualización
install.packages("arulesViz")
library(arulesViz)
plot(
reglas_interesantes,
method = "graph",
control = list(
type = "items",
engine = "htmlwidget",        # Usar el motor de gráficos interactivos (mejor visualización)
layout = "fruchtermanreingold", # Disposición de nodos para menos superposición
vertex.label.cex = 1.2,       # Tamaño del texto de las etiquetas
vertex.label.color = "black", # Color del texto de las etiquetas
vertex.size = 15,             # Tamaño de los nodos
edge.arrow.size = 0.5         # Tamaño de las flechas
),
shading = "lift"               # Sombras basadas en el valor de lift
)
install.packages("arulesViz")
# Instala y carga la librería arulesViz para visualización
install.packages("arulesViz")
library(arulesViz)
# Ajustar tamaño y guardar como PNG
png("grafico_reglas.png", width = 2000, height = 1500, res = 300)
# Crear el gráfico en el archivo PNG
plot(
reglas_interesantes,
method = "graph",
control = list(
type = "items",
layout = "fruchtermanreingold",
vertex.label.cex = 1.2,
vertex.label.color = "black",
vertex.size = 15,
edge.arrow.size = 0.5
),
shading = "lift"
)
install.packages("arulesViz")
# Instala y carga la librería arulesViz para visualización
install.packages("arulesViz")
library(arulesViz)
# Ajustar y guardar el gráfico en PNG
png("grafico_reglas.png", width = 2000, height = 1500, res = 300)
# Crear el gráfico sin los parámetros no reconocidos
plot(
reglas_interesantes,
method = "graph",
control = list(
layout = "stress",          # Usar "stress" si "fruchtermanreingold" no está disponible
circular = FALSE,
colors = c("#EE0000FF", "#EEEEEEFF"),
max = 100                    # Limitar la cantidad de reglas mostradas
),
shading = "lift"
)
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
install.packages("arulesViz")
# Instala y carga la librería arulesViz para visualización
install.packages("arulesViz")
library(arulesViz)
# Ajustar y guardar el gráfico en PNG
png("grafico_reglas.png", width = 2000, height = 1500, res = 300)
# Crear el gráfico sin los parámetros no reconocidos
plot(
reglas_interesantes,
method = "graph",
control = list(
layout = "stress",          # Usar "stress" si "fruchtermanreingold" no está disponible
circular = FALSE,
colors = c("#EE0000FF", "#EEEEEEFF"),
max = 100                    # Limitar la cantidad de reglas mostradas
),
shading = "lift"
)
# Cerrar el dispositivo gráfico para guardar el archivo
